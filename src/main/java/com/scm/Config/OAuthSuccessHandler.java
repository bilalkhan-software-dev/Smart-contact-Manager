package com.scm.Config;import com.scm.Entities.Providers;import com.scm.Entities.User;import com.scm.Helpers.AppConstant;import com.scm.Repositories.UserRepository;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.Authentication;import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;import org.springframework.security.oauth2.core.user.DefaultOAuth2User;import org.springframework.security.web.DefaultRedirectStrategy;import org.springframework.security.web.authentication.AuthenticationSuccessHandler;import org.springframework.stereotype.Component;import java.io.IOException;import java.util.List;import java.util.Objects;import java.util.UUID;@Componentpublic class OAuthSuccessHandler implements AuthenticationSuccessHandler {    private final UserRepository userRepository;    Logger logger = LoggerFactory.getLogger(OAuthSuccessHandler.class);    @Autowired    public OAuthSuccessHandler(UserRepository userRepository) {        this.userRepository = userRepository;    }    @Override    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException {        logger.info("OAuthAuthenticationSuccessHandler");        // Identify the provider        var principal = (OAuth2AuthenticationToken) authentication;        String authorizedClientRegisteredId = principal.getAuthorizedClientRegistrationId();        logger.info(authorizedClientRegisteredId);        // Get attributes        var oAuthUser = (DefaultOAuth2User) authentication.getPrincipal();        oAuthUser.getAttributes().forEach((key, value)                -> logger.info("{} : {}", key, value));        User user = new User();        user.setEnable(true);        user.setEmailVerified(true);        user.setUserId(UUID.randomUUID().toString());        user.setRole_list(List.of(AppConstant.ROLE_USER));        user.setPassword("******");        if (authorizedClientRegisteredId.equalsIgnoreCase("google")) {            // Google attributes            user.setEmail(Objects.requireNonNull(oAuthUser.getAttribute("email")).toString());            user.setProfilePic(Objects.requireNonNull(oAuthUser.getAttribute("picture")).toString());            user.setName(Objects.requireNonNull(oAuthUser.getAttribute("name")).toString());            user.setProvider(Providers.GOOGLE);            user.setProviderUserId(oAuthUser.getName());            user.setAbout("This account is created using Google OAuth");        } else if (authorizedClientRegisteredId.equalsIgnoreCase("github")) {            // GitHub attributes            String email = oAuthUser.getAttribute("email") != null ?                    Objects.requireNonNull(oAuthUser.getAttribute("email")).toString()                    :                    Objects.requireNonNull(oAuthUser.getAttribute("login")) + "@gmail.com";            String picture = Objects.requireNonNull(oAuthUser.getAttribute("avatar_url")).toString();            String name = Objects.requireNonNull(oAuthUser.getAttribute("login")).toString();            user.setEmail(email);            user.setName(name);            user.setProfilePic(picture);            user.setProviderUserId(oAuthUser.getName());            user.setProvider(Providers.GITHUB);            user.setAbout("This account is created using GitHub OAuth");        } else if (authorizedClientRegisteredId.equalsIgnoreCase("linkedin")) {            System.out.println("For login with linkedIn same as previous finding attribute and set in user class ");        } else if (authorizedClientRegisteredId.equalsIgnoreCase("facebook")) {            System.out.println("For login with facebook same as previous");        } else {            logger.info("OAuthSuccessHandler : Unknown Provider");        }        // Save user if not already in DB        User userFromDb = userRepository.findByEmail(user.getEmail()).orElse(null);        if (userFromDb == null) {            userRepository.save(user);            logger.info("User saved successfully: {}", user.getEmail());        }        new DefaultRedirectStrategy().sendRedirect(request, response, "/user/profile");    }}